{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","class","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAIaA,EAAO,SAAAC,GAAK,OAErB,sBAAKC,UAAU,iBAAf,UACE,qBACCC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEf,mCAAML,EAAMI,QAAQE,QACrB,kCAAKN,EAAMI,QAAQG,aCPdC,EAAW,SAACR,GAAD,OAGpB,aAFD,CAEC,OAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCLdM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAErB,uBACGC,MAAQ,SACRC,KAAO,SACNH,YAAcA,EACbI,SAAUH,MC2CJI,E,kDA9Cb,aACC,IAAD,8BAEI,gBACKC,MAAQ,CACTT,SAAU,GACVU,YAAa,IALrB,E,qDAWD,WAAoB,IAAD,OAElBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAAChB,SAASe,S,oBAOrC,WAAS,IAAD,SACyBE,KAAKR,MAA9BT,EADA,EACAA,SAAUU,EADV,EACUA,YACZQ,EAAmBlB,EAASmB,QAAO,SAAAxB,GAAO,OAAIA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAEpG,OACE,sBAAK5B,UAAU,MAAf,UAEE,iDACA,cAAC,EAAD,CACGW,YAAY,iBACZC,aAAc,SAAAkB,GAEb,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAGzC,cAAC,EAAD,CAAUxB,SAAYkB,W,GAxCVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c888c3a9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n  \r\n    <div className='card-container'> \r\n      <img\r\n       alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n     /> \r\n         <h2> {props.monster.name}</h2>\r\n        <p> {props.monster.email}</p>\r\n    </div>\r\n\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = (props) => (\r\n   // console.log(props);\r\n    \r\n    <div className='card-list'> \r\n    {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster = {monster}/>\r\n    ))}\r\n    \r\n    </div>\r\n);\r\n\r\n","import React from 'react'; \r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) =>(\r\n\r\n    <input\r\n       class = 'search'\r\n       type = 'search'\r\n        placeholder= {placeholder}\r\n         onChange={handleChange}\r\n        />\r\n\r\n)","import './App.css';\r\nimport React, {Component} from 'react';\r\nimport {CardList} from './components/card-list/card-list.component';\r\nimport {SearchBox} from './components/search-box/search-box.component';\r\n\r\nclass App extends Component{\r\n  \r\n  constructor()\r\n  {\r\n\r\n      super();\r\n      this.state = {\r\n          monsters: [],\r\n          searchField: ''\r\n\r\n      };\r\n\r\n  }\r\n  \r\n componentDidMount(){\r\n\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then(users=>this.setState({monsters:users}));\r\n  \r\n  \r\n\r\n }\r\n \r\n\r\n  render(){\r\n  const { monsters, searchField} = this.state;\r\n  const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n   );\r\n  return (\r\n    <div className=\"App\">\r\n    \r\n      <h1> Dua King Kong </h1>\r\n      <SearchBox \r\n         placeholder='Search Monster'\r\n         handleChange={e => {\r\n        \r\n          this.setState({searchField: e.target.value})}}\r\n      \r\n      />  \r\n      <CardList monsters = {filteredMonsters}/>\r\n     \r\n    </div>\r\n  );\r\n  }\r\n\r\n\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n); //grab element id 'root' from html and insert App into it.  \r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}